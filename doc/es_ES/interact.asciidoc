:Autor:    Skyline-ch
:Email:     <skyline-ch@play-4-fun.net>
:Date:      12.12.2015
:Revisión: 2.0.0

= Interacciones - principio

La interacción en el sistema de Jeedom permite llevar a cabo acciones de comando de texto o voz.

Tipo de comandos:

* acción: ejecutar un comando ejemplos: activar o desactivar una lámpara, alarma, calefacción, etc....
* Info: consulta a Jeedom con un comando para saber por ejemplo, la temperatura de la habitación, el estado de un dispositivo.

Estos comandos pueden obtenerse por:

* SMS: enviar un SMS para ejecutar comandos (acción) o una pregunta (info).
* Vocal: dictar una sentencia con Siri, Google Now, SARAH, etc.... Para ejecutar comandos (acción) o una pregunta (info).
* HTTP: lanzar una dirección URL HTTP que contiene el texto (por ejemplo, Tasker, Slack) para ejecutar comandos (acción) o una pregunta (info).

La importancia de las interacciones se encuentran en la integración simplificada en otro sistema como smartphones, tabletas, otro sistema domótico, ect...

Con un único mecanismo en otro sistema, por tanto, puede controlar cualquier Jeedom, lo que permite una gran flexibilidad y evita errores al cambiar las configuraciones de sus dispositivos como sería el caso con acceso directo a través de la url de cada comando.

== Primer paso

=== Página inicial de interacciones

Para acceder a la página interacción vaya a Herramientas -> interacciones: 

image::../images/interact001.png[]

Lista de interacciones y acciones de carácter general:

image::../images/interact002.png[]

[TIP]
Al igual que en muchos lugares en Jeedom, situar el ratón en la zona la izquierda mostrará un menú de acceso rápido (se puede mostrar como "siempre visible" desde la configuración de su perfil).

* En el la parte superior de la página, hay 3 botones:
** 1 * el botón "Añadir" que permite crear una nueva interacción.
** 2 * el botón "Actualizar" que recreará todas las interacciones (puede llevar mucho tiempo > 5 min).
** 3 * el botón "Probar" que abre un cuadro de diálogo para escribir una frase y hacer un test.

[TIP]
Si tienes una interacción que genera una sentencia para las luces por ejemplo, que agregue un nuevo módulo de control de luz, necesitas regenerar todas las interacciones en la interacción en cuestión y salvarla para crear la frase de este nuevo módulo.


=== Crear-editar una interacción

El principio de creación es bastante sencillo, definiremos una oración modelo con el generador, que permitirá a Jeedom crear uno o varios cientos de frases ,que son combinaciones del modelo.

definir la misma forma de las respuestas con un modelo (permite a Jeedom tener respuestas múltiples a una sola pregunta).

También se define un comando a ejecutar si por ejemplo la interacción no está relacionada con una acción, si no con información o si desea realizar una acción particular después (también es posible ejecutar un escenario, revisar varias órdenes...).

=== Interfaz de configuración

Desde esta página se puede configurar todas las interacciones orales (a través del módulo de SARAH, o tasker (+ autovoice), véase https://jeedom.fr/doc/documentation/howto/fr_FR/doc-howto-android.autovoice.html [aquí]) o por escrito (por sms o el plugin de Slack por ejemplo...) se puede encontrar en el market de Jeedom.

Una vez creada la interacción, haga clic en una interacción existente para modificarla, se abrirá la página de configuración de la interacción:

image::../images/interact003.png[]

Aquí puedes encontrar 2 zonas con varios elementos entre ellos: 

* *General*
** *Nombre* : nombre de la interacción (puede estar vacía, el nombre reemplaza el texto de la aplicación en la lista de interacciones).
** *Grupo* : grupo de interacción, esto permite organizarlos (puede estar vacio, por lo que pertenecerán al grupo "ninguno").
** Aplicación *: la frase modelo generada (obligatorio).
** *Sinónimos* : permite definir sinónimos de los nombres de los comandos.
** *Respuesta* : la respuesta a dar.
** Conversión Binaria* : permite convertir los valores binarios en abierto/cerrado por ejemplo (sólo para comandos de tipo información binaria).
** *Usuarios autorizados* : limita la interacción a ciertos usuarios (separados por un |).
* *Filtros (limitar el alcance de la plantilla a los elementos seleccionados)*
** *Limitar a órdenes de tipo* : permite utilizar sólo los tipos acciones, información o los 2 tipos.
** * Límita permanente el subtipo *: permite limitar la generación de uno o más subtipos.
** Límitar los comandos por unidad *: restringe la generación en una más unidades (Jeedom crea la lista automáticamente de las unidades definidas en sus comandos).
** *Limitar los comandos pertenecientes al objeto* : permite limitar la generación en uno o más objetos (Jeedom crea la lista automáticamente de los objetos que ha creado).
** Limitar el plugin *: permite limitar la generación en uno o más plugins (Jeedom crea la lista automáticamente de los plugins instalados).
** *Limitar categoría* : permite limitar la generación en una o más categorías.
** *Límitar dispositivo* : permite limitar la generación a un solo equipo/módulo (Jeedom crea la lista automáticamente de componentes y módulos que tiene).
* *Acción* : utilizar si quieres uno o más comandos específicos de destino o pasar parámetros específicos.
* *Frases generadas*
** Frases generadas* : botón que permite ver las frases generadas por frase modelo (debes guardar la interacción para construir o reconstruir las frases).
* *Número de frases generadas* : número de frases generadas.

=== Interacción simple

La forma más sencilla de configurar una interacción es darle un modelo de generador rígido sin variación posible, este método enfocara específicamente con un comando o un script.

En el ejemplo que sigue, puede verse en el campo 'Demande' la frase exacta para activar la interacción, para encender la luz del techo del salón.

image::../images/interact004.png[]

Podemos ver esta captura la configuración para tener una interacción ligada a una acción específica, esta acción se define en el apartado Acción' de la página.

Puedes imaginar en hacer lo mismo con varias acciones, para encender varias luces en el salón como en el ejemplo que sigue:

image::../images/interact005.png[]

En los 2 ejemplos anteriores, la frase modelo, es idéntica, pero las acciones resultantes varían dependiendo de lo que se configure en la parte "Acción", así que puedes con una simple frase de  interacción única imaginar acciones combinadas entre varios comandos y varios escenarios (también puede desencadenar escenarios de acción por parte de las interacciones).

[TIP]
Para agregar un escenario, crear una nueva acción, escribir "scenario" sin acento, presiona tab en el teclado para que aparezca el selector de escenario.


=== Interacción múltiples de comandos

Aquí vemos la importancia y el poder de las interacciones, con una frase modelo, podremos generar frases para un grupo de comandos.

para mejorar lo que ha hecho anteriormente, eliminar las acciones que hayas agregado y en su lugar en "Aplicación", usaremos las etiquetas * \#commande#* y * \#equipement#*, Jeedom reemplazará estas etiquetas por el nombre de órden y el nombre del dispositivo (se puede ver la importancia de tener nombres de comandos/dispositivos coherentes).

image::../images/interact006.png[]

Aquí puedes ver que jeedom ha generado 152 frases de nuestra frase, sin embargo no están muy bien construidas y tienen un poco de todo.

Para hacer la orden para todo, vamos a utilizar filtros (parte derecha de nuestra página de configuración).
En este ejemplo queremos generar frases para encender las luces, así que puede desactivar el comando de tipo información (al guardar sólo quedam 95 frases generadas), luego en los subtipos puede mantener marcado por defecto la corresponde tecla de acción (por lo tanto quedan 16 frases).

image::../images/interact007.png[]

Es mejor y más natural si tomamos como ejemplo "en la entrada", sería bueno poder transformar esta frase en "ilumina la entrada" o "iluminar la entrada".
Para ello Jeedom en el campo de aplicación, podemos generar un campo de sinónimos que nos permitirá nombrar diferentemente el nombre de órdenes en nuestras frases, aquí, tengo incluso "on2" en módulos que pueden controlar 2 salidas.

En los sinónimos es donde vas a indicar el nombre del comando y el sinónimo(s) a utilizar : 

image::../images/interact008.png[]

Aquí puedes ver una pequeña sintaxis para sinónimos, un nombre de comando, puede tener varios sinónimos, aquí "en" como un sinónimo de "luz" y "luces", por lo que la sintaxis sería "#nom del comando #" * #= #* "#synonyme # 1" * #, #* "#synonyme # 2" (puedes poner tantos sinónimos que desees), luego añadir sinónimos para otro nombre de comando, agregar una barra vertical después del último sinónimo "#| #" suite que puede dar otra vez el nombre del comando quién tendrá sinónimos como en la la primera parte.

Bueno, esto esta mejor pero todavía faltan para el comando "en" "entrar" en el "el" y otro "la" o "el" o "una" ect...
Podría cambiar el nombre del dispositivo a agregar, sería una solución, de lo contrario puede utilizar cambios en la aplicación, se trata de una serie de posibles palabras a una ubicación en la frase de la lista, Jeedom por lo tanto generará frases con sus variaciones.

image::../images/interact009.png[]

Como se puede ver en la lista de la izquierda, ahora hay unas frases un poco más correctas, para nuestro ejemplo "en" la 'entrada', por lo tanto es "iluminar" introducción, "Ilumina una entrada", "Activar una entrada", "Iluminar la entrada" ect... están valoradas todas las variantes posibles con lo que se añadió entre '[]' para cada sinónimo, que rápidamente genera un montón de frases (168 aquí).

Para ajustar incluso un poco más  y no hacer cosas improbables tales como "encender el televisor," puede permitir a Jeedom eliminar las solicitudes sintácticamente incorrectas, por lo tanto eliminará lo que está demasiado alejado de la actual sintaxis de una frase.
En nuestro caso pasamos de 168 oraciones a 130 oraciones.

image::../images/interact010.png[]


Por lo tanto es importante construir bien sus frases modelos y sinónimos, así como seleccionar buenos filtros para no generar demasiadas frases innecesarias.
Personalmente me parece interesante tener algunas incoherencias en el estilo 'una entrada' porque si, si eres una persona extranjera que no habla correctamente el francés, las interacciones trabajarán de la misma forma.

==== Función interacción avanzada

==== Personalizar respuestas

Hasta ahora como respuesta a una interacción, tuvimos una simple frase que no indica mucho, excepto que algo ha sucedido.
La idea es que Jeedom nos diga lo que ha hecho con más precisión.
Aquí interve el campo de la respuesta en la que podremos personalizar la respuesta según el comando ejecutado.

Para ello utilizamos otra vez las etiqueta deJeedom
Nuestras luces pueden utilizar una frase del estilo: iluminar \#equipement# (ver captura a continuación).

image::../images/interact011.png[]

También puede Agregar un valor a otro comando como una temperatura, un número de personas etc....

image::../images/interact012.png[]

===== Conversión binaria
Las conversiones a binario se aplican a los comandos de tipo información, cuyo subtipo es binario (devuelve 0 o 1) por lo tanto debería activar buenos filtros, como se ve en la captura inferior (para categorías todos podemos comprobar, por ejemplo he guardado esa luz).

image::../images/interact013.png[]

Como se ve aquí, mantuve casi la misma estructura de la aplicación (es voluntario para centrarse en los detalles), adapté los sinónimos para ser más coherentes, sin embargo, la respuesta es #impératif # poner solamente \#valeur# que representa el 0 o 1, Jeedom reemplazará por la conversión binario que sigue.

El campo de conversión binaria debe contener 2 respuestas, primero la respuesta si el valor de la orden es 0, entonces para el comando de respuesta si, separar 1 con una barra vertical
Aquí las respuestas son simplemente no y sí, pero podría poner una frase un poco más larga.

[ADVERTENCIA]
Las etiquetas no funcionan en las conversiones a binario.

====== Usuarios autorizados

El campo "usuarios autorizados" permite que sólo determinadas personas puedan ejecutar el comando, puedes poner varios usuarios separados por un "|".

Ejemplo: usuario1|usuario2

Uno puede imaginar que una alarma puede habilitarse o deshabilitarse por un niño o a un vecino que riegue las plantas en tu ausencia...

====== Exclusión Regexp 
[IMPORTANTE]
Función reservada a conocedores del tema que sepan usar Google.

Puesto que Jeedom V2.00 tiene la capacidad de crear exclusiones tipo [Regexp] https://fr.wikipedia.org/wiki/Expression_rationnelle , si una frase generada coincide con este Regexp se eliminarán.
La intención es eliminar los falsos positivos, es decir una frase de Jeedom que permite algo que no coincide con lo que queremos o que puedan interferir con la interacción de otro que tenga una frase similar.

Hay 2 lugares para aplicar una Regexp:

* en la misma interacción en el campo "Exclusión Regexp".

* En el menú "configuración"->"configuración de las interacciones"-> campo general de exclusión "Regexp" para las interacciones.

El campo genera de exclusión "Regex" para las interacciones, esta regla se aplicará a todas las interacciones que se creen o sean actualizadas más tarde, si deseas aplicar a todas las interacciones existentes debes regenerar las interacciones.
Generalmente se utiliza para eliminar frases mal formadas en interacciones más generadas.

En el campo de la exclusión "Regexp" en cada página de configuración de la interacción, puedes añadirr una Regexp específica que actuará únicamente en la supuesta interacción, borrará específicamente para dicha interacción, esto también puede eliminar una interacción para un comando específico, para los que no queremos ofrecer esta posibilidad en el contexto de un comando de generación múltiple.

La siguiente captura de pantalla, muestra la interacción sin la expresión Regexp, en la lista de la izquierda, filtré frases para demostrarle las frases que se eliminarán, en realidad hay 76 sentencias generadas con la configuración de la interacción.

image::../images/interact014.png[]


Como puedes ver en la siguiente imagen, he añadido una simple regexp que buscará la palabra "Julie" en las frases generadas y eliminarlas, sin embargo, se puede ver en la lista de la izquierda que aun hay frases con la palabra "julie", en expresiones regulares, Julie no es igual a julie, ésto se llama sensibilidad entre mayúsculas y minúsculas , en francés una letra mayúscula es diferente de una letra minúscula.
Como se muestra en la siguiente pantalla, hay 71 frases, 5 con "Julie" se han eliminado.

Una expresión regular se compone como sigue:

* Primero un delimitador, aquí es una barra "/" al principio y al final de la frase.

* lo que sigue la barra representa cualquier carácter, espacio o numero.

* El "*" mientras tanto, indica que puede ser 0 o varias veces el carácter anterior que le precede, aquí un punto, así que en buen francés cualquier elemento.

* Julie, que es la palabra de búsqueda (palabra u otro patrón de expresión), otra vez una barra de punto seguido.

Si traducimos esta expresión en una frase, sería "busca la palabra Julie que sea precedida por  nada y seguida por nada".

Es una versión muy simple de las expresiones regulares, pero es muy complicado de entender, me tomó un momento para explicar el funcionamiento, por ejemplo, un poco más complejo, un regexp para comprobar una URL: 

/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]\*)*\/?$/ 

Une fois que tu peux écrire ça tu as compris les expressions régulières.

image::../images/interact015.png[]

Para resolver el problema de mayúsculas y minúsculas, puedes agregar a nuestra expresión una opción que hará insensible, o en otras palabras, que considere una letra minúscula igual a una letra mayúscula, para esto simplemente agregar una "i" al final de nuestra expresión.

image::../images/interact016.png[]

Avec l'ajout de l'option "i" on constate qu'il ne reste plus que 55 phrases générées, et dans la liste de gauche avec le filtre julie pour rechercher les phrases qui contiennent ce mot, on constate qu'il y en a bien plus.

Como este es un tema muy complejo no entraré en más en detalles, hay suficiente información en la red, y no te olvides de que Google es también tu amigo, este amigo, fue él quien me enseñó a entender las Regexp y su código, por lo tanto si me ayudó a mí, también podrá ayudarte poniendo un poquito de empeño.

Enlace útil : 

* http://google.fr

* http://www.commentcamarche.net/contents/585-javascript-l-objet-regexp

* https://www.lucaswillems.com/fr/articles/25/tutoriel-pour-maitriser-les-expressions-regulieres

* https://openclassrooms.com/courses/concevez-votre-site-web-avec-php-et-mysql/les-expressions-regulieres-partie-1-2


== Ejemplos

=== Réponse compuesta con más informacion

También es posible poner multiples comandos info una respuesta, por ejemplo obtener un resumen de la situación.

image::../images/interact021.png[]

En este ejemplo vemos una frase simple que devolverá una respuesta con 3 temperaturas diferentes, por lo que podemos obtener aquí una sistema de información de una sola vez.


=== ¿Hay alguien en la sala?

==== Version basique

* La pregunta entonces es  "'y' hay alguien en la habitación "
* La respuesta será "no hay nadie allí en la sala" o "Si hay alguien en la habitación"
* El comando a responder es "julie \#[Chambre] [FGMS-001-2] [presencia] #"

image::../images/interact017.png[]

Cette exemple cible précisément un équipement spécifique ce qui permet d'avoir une réponse personnalisée, on pourrait donc imaginer remplacer la réponse de l'exemple par "non il n’y a personne dans la chambre de #julie#|oui il y a quelqu’un dans la chambre de #julie#"

==== Evolución 

* La pregunta entonces es "\#commande# [dans la |dans le] \#objet#"
* La respuesta será "no hay nadie allí en la sala" o "Si hay alguien en la habitación"
* No hay ningún comando que responda en la parte de acción, ya que es una interacción de comando múltiple
* En ajoutant une expression régulière on peut nettoyer les commandes que l'on ne veut pas voir pour n'avoir que les phrases sur les commandes "Présence".

image::../images/interact018.png[]

Sans le Regexp on obtient ici 11 phrases, or mon interaction a pour but de générer des phrases uniquement pour demander s'il y a quelqu'un dans une pièce, donc je n'ai pas besoin d'état de lampe ou autre comme les prises, ce qui peux être résolu avec le filtrage regexp.
Pour rendre encore plus flexible on peut ajouter des synonymes, mais dans ce cas il ne faudra pas oublier de modifier la regexp.


=== Connaitre la température/humidité/luminosité

==== Version basique
On pourrait écrire la phrase en dur comme par exemple "quelle est la température du salon", mais il faudrait en faire une pour chaque capteur de température, luminosité et humidité, avec le système de génération de phrase Jeedom, on peut donc avec une seul interaction générer les phrases pour tous les capteurs de ces 3 types de mesure.

Ici un exemple générique qui sert à connaître la température, l’humidité, la luminosité des différentes pièces (objet au sens Jeedom).

image::../images/interact019.png[]

* On peut donc voir qu'une phrase générique type "Quelle est la température du salon" ou "Quelle est la luminosité de la chambre" peut être convertie en : "quelle est [la |l\']\#commande# [du |de la |de l'| sur le |dans le | dans la ]#objet#" (l’utilisation de [mot1 | mot2] permet de dire cette possibilité ou celle-là pour générer toutes les variantes possibles de la phrase avec mot1 ou mot2). Lors de la génération Jeedom va générer toutes les combinaisons possibles de phrases avec toutes les commandes existantes (en fonction des filtres) en remplaçant \#commande# par le nom de la commande et \#objet# par le nom de l’objet.
* La réponse sera de type "21 °C" ou "200 lux" il suffit de mettre : \#valeur# \#unite# (l'unité est à compléter dans la configuration de chaque commande pour laquelle on veut en avoir une)
* Cette exemple génère donc une phrase pour toutes les commandes de type info numérique qui ont une unité, on peut donc décocher des unités dans le filtre de droite limité au type qui nous intéresse.


==== Evolución 
On peut donc ajouter des synonymes au nom de commande pour avoir quelque chose que plus naturel, ajouter un regexp pour filtrer les commandes qui non rien a voir avec notre interaction.

Ajout de synonyme, permet de dire à Jeedom qu'une commande qui s'appelle "X" peut aussi s'appeler "Y" et donc dans notre phrase si on a "allume y", Jeedom sait que c'est allumé x, cette méthode est très pratique pour renommer des noms de commande qui quand elles sont affichées à l'écran sont écrite d'une façon qui n'est pas naturelle vocalement ou dans une phrase écrite comme les "ON", un bouton écrit comme cela est totalement logique mais pas dans le contexte d'une phrase.

On peut aussi ajouter un filtre Regexp pour enlever quelques commandes. En reprenant l'exemple simple on voit des phrases "batterie" ou encore "latence", qui n'ont rien à voir avec notre interaction température/humidité/luminosité.

image::../images/interact020.png[]

On peut donc voir un regexp : 

*(batterie|latence|pression|vitesse|consommation)*

Celui-ci permet de supprimer toutes les commandes qui ont l'un de ces mots dans leur phrase

[NOTA]
Le regexp ici est une version simplifiée pour une utilisation simple on peut donc soit utiliser les expressions traditionnelles, soit utiliser les expressions simplifiées comme dans cet exemple.


=== Piloter un dimmer ou un thermostat (slider)

==== Version basique

Il est possible de piloter une lampe en pourcentage (variateur) ou un thermostat avec les interactions. Voici un exemple pour piloter son variateur sur une lampe avec des interactions : 

image::../images/interact022.png[]

Comme on le voit, il y a ici dans la demande le tag *\#consigne#* (on peut mettre ce que l'on veut) qui est repris dans la commande du variateur pour appliquer la valeur voulue.
Pour ce faire ont a 3 parties :
* Demande : dans laquelle on crée un tag qui va représenter la valeur qui sera envoyée à l'interaction.
* Réponse : on réutilise le tag pour la réponse afin d'être sûr de ce que Jeedom a compris.
* Action : on met une action sur la lampe que l'on veut piloter et dans la valeur on y passe notre tag #consigne#.

[NOTA]
On peut utiliser n'importe quel tag excepté ceux déjà utilisés par Jeedom, il peut y en avoir plusieurs pour piloter par exemple plusieurs commandes. A noter aussi que tous les tags sont passés aux scénarios que l'interaction lance (il faut toutefois que le scénario soit en "Exécuter en avant plan").

==== Evolución 
On peut vouloir piloter toutes les commandes de type curseur avec une seule interaction, avec l'exemple qui suit on va donc pouvoir commander plusieurs variateurs avec une seule interaction et donc générer un ensemble de phrases pour les controler.

image::../images/interact033.png[]

Dans cette interaction, on n'a pas de commande dans la partie action, on laisse Jeedom générer à partir des tags la liste de phrases, on peut voir le tags *\#slider#*, il est impératif d'utiliser ce tag pour les consignes dans une interaction multiple commande, il peut ne pas être le dernier mot de la phrase.
On peut aussi voir dans l'exemple que l'on peut utiliser dans la réponse un tag qui ne fait pas partie de la demande, la majoritée des tag disponibles dans les scénarios sont disponibles aussi dans les interactions et donc peuvent être utilisés dans une réponse.

Résultat de l'interaction : 

image::../images/interact034.png[]

On peut constater que le tag *\#equipement#* qui n'est pas utilisé dans la demande est bien complété dans la réponse.


=== Piloter la couleur d'un bandeau de LED

Il est possible de piloter une commande couleur par les interactions en demandant par exemple à Jeedom d'allumer un bandeau de led en bleu. 
Voilà l'interaction à faire : 

image::../images/interact023.png[]

Jusque-là rien de bien compliqué, il faut en revanche avoir configuré les couleurs dans Jeedom pour que cela fonctionne, rendez-vous dans le menu -> Configuration (en haut à droite) puis dans la partie "Configuration des interactions" : 

image::../images/interact024.png[]

Comme on peut le voir sur la capture, il n'y a pas de couleur configurée, il faut donc ajouter des couleurs avec le "+" à droite, le nom de la couleur, c'est le nom que vous allez passer à l'interaction, puis dans la partie de droite (colonne "Code HTML"), en cliquant sur la couleur noire on peut choisir une nouvelle couleur.

image::../images/interact025.png[]

On peut en ajouter autant que bon nous semble, on peut mettre comme nom n'importe lequel, ainsi on pourrait imaginer attribuer une couleur pour le nom de chaque membre de la famille.

Une fois configuré vous dite "Allume le sapin en vert", Jeedom va rechercher dans la demande une couleur et l'appliquer à la commande.


=== Utilisation couplée à un scénario

==== Version basique
Il est possible de coupler une interaction à un scénario afin de réaliser des actions un peu plus complexes que l'exécution d'une simple action ou d'une demande d'information.

image::../images/interact026.png[]

Cette exemple permet donc de lancer le scénario qui est lié dans la partie action, on peut bien sûr en avoir plusieurs.


=== Programmation d'une action avec les interactions

Les interactions permettent de faire beaucoup de choses en particulier vous pouvez programmer dynamiquement une action. Exemple : "Met le chauffage à 22 pour 14h50". Pour cela rien de plus simple, il suffit d'utiliser les tags \#time# (si on définit une heure précise) ou  \#duration# (pour dans X temps, exemple dans 1 heure) : 

image::../images/interact23.JPG[]

[NOTA]
Vous remarquerez dans la réponse le tag \#value# celui-ci contient dans le cas d'une interaction programmée l'heure de programmation effective

Voilà le résultat : 

image::../images/interact24.JPG[]

== Tester une interaction

Le bouton tester (en haut a gauche) vous permet de saisir une phrase pour tester son bon fonctionnement et de l'exécuter : 

image::../images/interact11.JPG[]

En réponse, Jeedom vous retournera la réponse qui correspond à l'interaction (champ réponse) : 

image::../images/interact13.JPG[]


== Configuración

La configuration est accessible à partir du menu Configuration (en haut à droite) puis la partie "Configuration des interactions" :

image::../images/interact14.JPG[]

Vous avez ici 3 paramètres : 

* *Sensibilité* : il y a 4 niveaux de correspondance 
** pour 1 mot : le niveau de correspondance pour les interactions à un seul mot
** 2 mots : le niveau de correspondance pour les interactions à deux mots
** 3 mots : le niveau de correspondance pour les interactions à trois mots
** + de 3 mots : le niveau de correspondance pour les interactions à plus de trois mots

La sensibilité va de 1 (correspond exactement) à 99 (je louche donc c'est ok pour moi), 

* *Ne pas répondre si l'interaction n'est pas comprise* : par défaut Jeedom répond "je n'ai pas compris" si l'interaction n'est pas comprise, il est possible de désactiver ce fonctionnement pour que Jeedom ne réponde rien, mettre le bouton à oui pour désactiver la réponse.
* *Regex général d'exclusion pour les interactions* : permet de définir une regexp qui si elle correspond à une interaction supprimera automatiquement cette phrase de la génération (réservé aux experts) pour plus d'infos voir les explications dans le chapitre *"Regexp d'exclusion"*

Puis vous retrouvez la partie paramétrage des couleurs qui est décrite en détail dans le chapitre *"Piloter la couleur d’un bandeau de LED"*

[IMPORTANTE]
Ne pas oublier de sauver en bas de page.

[TIP]
Si vous activez les logs au niveau debug vous avez un log interact qui vous donne la niveau de sensibilité pour chaque comparaison de phrase, cela peut permettre de régler celui-ci plus facilement.

== Résumé

Demande::
Vous pouvez utiliser "\#commande#" et "\#objet#" (les 2 doivent absolument être utilisés ensemble) pour générer une liste de commandes (il est possible de filtrer la génération pour réduire la liste). Il est aussi possible d'utiliser "\#equipement#" (utile si plusieurs commandes appartenant au même objet ont le même nom)
Exemple : Quelle est la "\#commande# [du |de la |de l']\#objet#"
Lors de la génération des commandes vous pouvez utiliser le champ synonyme (syn1=syn2,syn3|syn4=syn5) pour remplacer le nom des objets, des équipements et/ou des commandes

Réponse::
Vous pouvez utiliser "\#valeur#" et "\#unite#" dans le retour (ils seront remplacés par la valeur et l'unité de la commande). Vous avez aussi accès à tous les tags des scénarios et à : 
"\#profile#" => Nom de la personne ayant lancé l'exécution (peut ne pas être disponible)
Exemple : "\#valeur# \#unite#"
Vous pouvez utiliser le champ conversion binaire pour convertir les valeurs binaires (0 et 1) : 
Exemple : non|oui

Personne::
Le champ personne permet de n'autoriser que certaines personnes à exécuter la commande, vous pouvez mettre plusieurs profils en les séparant par |.
Ejemplo: usuario1|usuario2